# cluster
cpd.cluster.port=5701
cpd.cluster.port.autoIncrement=false
cpd.cluster.port.count=10000
cpd.cluster.interface=10.10.1.*
cpd.cluster.outbound.ports=*
# ssl
cpd.ssl.enabled=false
cpd.ssl.keystore.filename=keystore.jks
cpd.ssl.keystore.password=simpatico
# server
cpd.server.name=Simpatico CPD Server
cpd.server.scheme=http
cpd.server.hostname=localhost
cpd.server.port=8901
cpd.server.baseHref=/cpd/
cpd.server.allowedOriginPattern=http:\\\\/\\\\/(editor\\\\.swagger\\\\.io|localhost:${cpd.server.port})
cpd.server.simLagTime=200
! server.cacheBuilder
cpd.server.cacheBuilder.concurrencyLevel=1
cpd.server.cacheBuilder.initialCapacity=100
cpd.server.cacheBuilder.maximumSize=1000
cpd.server.cacheBuilder.expireAfterAccess=60m
! server.auth
cpd.server.auth.path=auth/
cpd.server.auth.login={provider}/login
cpd.server.auth.logout=logout
cpd.server.auth.getOAuth2Providers=oauth2/providers
cpd.server.auth.getUserIsAuthenticated=user/isAuthenticated
cpd.server.auth.getUserProfile=user/profile
cpd.server.auth.getUserProfileImage=user/profile/image
! server.api
cpd.server.api.path=api/
cpd.server.api.getTypeIds=type/ids
cpd.server.api.getType=type/{typeId}
cpd.server.api.getDiagramSummaryList=diagram/summary/list
cpd.server.api.getDiagram=diagram/{diagramId}
cpd.server.api.getDiagramElements=diagram/{diagramId}/elements
cpd.server.api.getSemantic=semantic/{semanticId}
cpd.server.api.putSemantic=semantic/{semanticId}
! server.assets
cpd.server.assets.allowListing=true
# CPD webapp
cpd.webapp.routes="login","login/*","diagram/*","oauth2/client/callback"
cpd.webapp.diagramPath=diagram/
# QAE webapp
cpd.qae.href=https://simpatico.morelab.deusto.es/citizenpedia/
cpd.qae.api.path=api/
cpd.qae.api.getQuestionCount=stats/diagrams/{elementId}
cpd.qae.link.newQuestion=questions/create?tags={eServiceId},{diagramId},{elementId},Diagram
cpd.qae.link.relatedQuestions=diagrams/list/{elementId}
# mongodb
cpd.mongodb.host=localhost
cpd.mongodb.port=27017
cpd.mongodb.name=cpd
cpd.mongodb.username=
cpd.mongodb.password=
cpd.mongodb.useObjectId=false
cpd.mongodb.maxPoolSize=100
cpd.mongodb.maxIdleTimeMS=60000
cpd.mongodb.maxLifeTimeMS=3600000
# oauth2
cpd.oauth2.host=my redirect callback server
! NOTE: the oauth2 redirect callback endpoint will be:
!! "${cpd.oauth2.host}oauth2/server/callback" for AUTH_CODE and CLIENT (1,2) flows
!! "${cpd.oauth2.host}oauth2/client/callback for IMPLICIT (3) flows
!! leave empty if no oauth2 is required
cpd.oauth2.providers=
! cpd.oauth2.providers must be a list of comma separated json objects (see example):
! example for 2 providers
#  cpd.oauth2.providers=\
#  {\
#    "provider":"Google",\
#    "logoUrl":"assets/img/oauth2_google_logo.png",\
#    "site":"https://accounts.google.com",\
#    "authPath":"/o/oauth2/auth",\
#    "tokenPath":"https://www.googleapis.com/oauth2/v3/token",\
#    "introspectionPath":"https://www.googleapis.com/oauth2/v3/tokeninfo",\
#    "clientId":"my google app client id",\
#    "clientSecret":"my google app client secret",\
#    "flows":[\
#      {\
#        "flowType":"AUTH_CODE",\
#        "scope":"email",\
#        "getUserProfile": "https://www.googleapis.com/plus/v1/people/{userId}"\
#      }\
#    ]\
#  },\
#  {\
#    "provider":"AAC",\
#    "logoUrl":"assets/img/oauth2_aac_logo.png",\
#    "site":"http://my.aac:8080",\
#    "authPath":"/aac/eauth/authorize",\
#    "tokenPath":"/aac/oauth/token",\
#    "clientId":"my aac app client id",\
#    "clientSecret":"my aac app client secret",\
#    "flows":[\
#      {\
#        "flowType":"IMPLICIT",\
#        "scope":"profile.basicprofile.me",\
#        "getUserProfile": "http://my.aac:8080/aac/basicprofile/me"\
#      },\
#      {\
#        "flowType":"CLIENT"\
#      }\
#    ]\
#  }
# model
! model.roles
!! model.roles.position
cpd.model.roles.position.admin=semantic:organization:roles:Position:admin
cpd.model.roles.position.civilServant=semantic:organization:roles:Position:civil-servant
cpd.model.roles.position.citizen=semantic:organization:roles:Position:citizen
!! model.roles.diagramRole
cpd.model.roles.diagramRole.editor=semantic:organization:roles:DiagramRole:editor
cpd.model.roles.diagramRole.owner=semantic:organization:roles:DiagramRole:owner
cpd.model.roles.diagramRole.reviewer=semantic:organization:roles:DiagramRole:reviewer
cpd.model.roles.diagramRole.collaborator=semantic:organization:roles:DiagramRole:collaborator
cpd.model.roles.diagramRole.observer=semantic:organization:roles:DiagramRole:observer
